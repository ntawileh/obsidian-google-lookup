{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#obsidian-google-lookup","title":"Obsidian Google Lookup","text":"<p>Obsidian plugin that can insert Google Calendar events and Google contact info directly into your notes</p> <p></p> <p>The suggestion modal is looking up your calendar events. This is useful for folks who take meeting notes in Obsidian and want to quickly populate meeting metadata.</p> <p></p> <p>Here the suggestion modal is looking up contacts, both personal contacts and also people in your Google Workspace's Directory. This is useful when using Obsidian as a mini-CRM and want to be able to quickly create notes for individuals you work with that can later backlink to other notes.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Command to look up and insert Google Calendar event into current editor</li> <li>Command to look up and insert Google Contacts (user Contacts and Directory) info into current editor</li> <li>Support multiple Google accounts</li> <li>Customizable templates for inserted content</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>The two commands will show up only when there is an active editor/markdownview.</p> <p></p>"},{"location":"api/","title":"API","text":"<p>This plugin exposes an API that other plugins can use to lookup people and events.</p>"},{"location":"api/#enabling-the-api","title":"Enabling the API","text":"<p>For security reasons, the API is disabled by default. A user must explicitly enable it before any other plugin can access it. This is done in the plugin's settings under Advanced -&gt; Expose API to other plugins.</p> <p>Enabling this option requires the user to complete a security confirmation to ensure they understand the risks. Please instruct your users to perform this one-time setup step if your plugin depends on the Google Lookup API.</p>"},{"location":"api/#accessing-the-api","title":"Accessing the API","text":"<p>To access the API, you need to get the plugin instance from Obsidian's plugin manager. It is recommended to wait for the plugin to be loaded before accessing the API.</p> <pre><code>const googleLookupPlugin = app.plugins.plugins['obsidian-google-lookup'];\nif (googleLookupPlugin) {\n  const api = googleLookupPlugin.api;\n  if (api !== undefined) {\n    // You can now use the api object\n  } else {\n    // Handle the case where the API is not available\n    // (the user has not enabled it in settings)\n  }\n} else {\n  // Handle the case where the plugin is not enabled or available\n}\n</code></pre>"},{"location":"api/#api-methods","title":"API Methods","text":"<p>The API object provides the following methods:</p>"},{"location":"api/#getaccounts","title":"getAccounts()","text":"<p>Returns a list of all configured Google account names.</p> <p>Returns: <code>Promise&lt;string[]&gt;</code> - A promise that resolves to an array of account name strings.</p> <p>Example:</p> <pre><code>const accountNames = await api.getAccounts();\nconsole.log(accountNames);\n// Output: ['account1@gmail.com', 'account2@work.com']\n</code></pre>"},{"location":"api/#peoplequery-accountname","title":"people(query, [accountName])","text":"<p>Searches for people in your Google Contacts and Directory.</p> <p>Parameters:</p> <ul> <li><code>query</code> (string): The search query.</li> <li><code>accountName</code> (string, optional): The name of a specific account to query. If not provided, all accounts will be searched.</li> </ul> <p>Returns: <code>Promise&lt;PersonResult[]&gt;</code> - A promise that resolves to an array of person results.</p>"},{"location":"api/#eventsquery-accountname","title":"events(query, [accountName])","text":"<p>Searches for events in your Google Calendar.</p> <p>Parameters:</p> <ul> <li><code>query</code> (moment.Moment): A moment.js object representing the date for which to fetch events.</li> <li><code>accountName</code> (string, optional): The name of a specific account to query. If not provided, all accounts will be searched.</li> </ul> <p>Returns: <code>Promise&lt;EventResult[]&gt;</code> - A promise that resolves to an array of event results.</p>"},{"location":"api/#example","title":"Example","text":"<p>Here is an example of how to use the API from a Templater user script:</p> <pre><code>async function lookup(tp) {\n  const api = app.plugins.plugins['obsidian-google-lookup']?.api;\n  if (!api) {\n    new Notice(\"Google Lookup plugin or its API is not enabled.\");\n    return;\n  }\n\n  // Get available accounts\n  const accounts = await api.getAccounts();\n  console.log(\"Available accounts:\", accounts);\n\n  const personQuery = await tp.system.prompt(\"Enter name to search\");\n  if (personQuery) {\n    // Search all accounts for a person\n    const allPeople = await api.people(personQuery);\n    console.log(\"People (all accounts):\", allPeople);\n\n    // Or search a specific account if available\n    if (accounts.length &gt; 0) {\n      const peopleInFirstAccount = await api.people(personQuery, accounts[0]);\n      console.log(`People (${accounts[0]}):`, peopleInFirstAccount);\n    }\n  }\n\n  // Search for today's events\n  const todaysEvents = await api.events(moment());\n  console.log(\"Today's Events:\", todaysEvents);\n}\n\nmodule.exports = lookup;\n</code></pre>"},{"location":"events/","title":"Events Info","text":""},{"location":"events/#command-input","title":"Command Input","text":"<p>The input is a date in <code>YYYY-MM-DD</code> format, for example <code>2022-06-20</code></p> <p>When nothing has been input yet, the following criteria will be applied as default (in order):</p> <ul> <li>if some text is selected AND that text matches the format above, use that as default</li> <li>if the filename matches the format, use that as default. this is useful in conjunction with daily notes that have a format of \"YYYY-MM-DD\"</li> <li>if neither of the above two match, use today as a default</li> </ul>"},{"location":"events/#template","title":"Template","text":""},{"location":"events/#default-template","title":"Default Template","text":"<pre><code>### {{summary}}\n\n* {{start}}-{{end}}: [Link]({{link}})\n* organizer {{organizer}}\n* {{attendees}}\n* {{location}}\n\n{{attachments}}\n\n{{conference}}\n</code></pre> <p>The content above will be inserted for a selected event. To customize, create a new template in a file and reference that file in the plugin settings.</p>"},{"location":"events/#template-fields","title":"Template Fields","text":"<p>Fields are variables enclosed in <code>{{</code> <code>}}</code> and will be replaced when the content is generated.</p> Field Description id The event ID recurringId The recurring event ID summary Event title description Event description status The event status (e.g. confirmed, tentative, cancelled) eventType The event type (e.g. default, focusTime) start The event start time end The event end time link This will produce a link to the Google calendar event. Useful to reference attachment in the event or other event info organizer The email of the event organizer attendees Email(s) of all attendees, joined by <code>,</code>. If the attendee had declined the event, a <code>(x)</code> will appear near their email. A tentative response will have a <code>(?)</code> appended attendees.name Similar to <code>attendees</code> but will replace the email with the name of the attendee. If the name is not available for an attendee, the email is returned instead. location The event location attachments A list of attachments for the event, formatted as markdown links. conference A list of conference entry points for the event, formatted as markdown links. conference.solution The name of the conference solution (e.g. Google Meet). source will return the google account from where this event was fetched json returns the entire event object as JSON. this is useful when used with other templating plugins. see example."},{"location":"events/#customizing-template","title":"Customizing Template","text":"<p>You can create your own template in a file, and include a link to that file in Settings for <code>Event Template</code>. For example, you can create a note in <code>_assets/templates/</code> called <code>t_event</code> and then provide the path <code>_assets/templates/t_event</code> in Settings</p>"},{"location":"events/#notes","title":"Notes","text":"<p>The plugin will only query the primary calendar of the logged in user.</p>"},{"location":"google-setup/","title":"Google Client Setup","text":"<p>The first step to using the plugin is getting set up with Google credentials that the application case use.</p>"},{"location":"google-setup/#instructions","title":"Instructions","text":"<ul> <li>Create Google Cloud Project. The name of the project doesn't matter.</li> <li>Activate Google People API</li> <li>Activate Google Calendar API</li> </ul> <p>You should now see <code>People API</code> and <code>Google Calendar API</code> listed in the API dashbooard of your project. At this point, your project is set up to use those APIs. Now on to creating a client that the application can use.</p> <ul> <li> <p>Configure OAUTH screen</p> </li> <li> <p>The type of the application should be <code>External</code> (unless you are building it for users of your Google domain only)</p> </li> <li> <p>When asked for the Scopes, you should have the following:</p> <ul> <li>.../auth/calendar.calendarlist.readonly</li> <li>.../auth/userinfo.profile</li> <li>.../auth/calendar.readonly</li> <li>.../auth/calendar.calendars.readonly</li> <li>.../auth/calendar.events.readonly</li> <li>.../auth/contacts.readonly</li> <li>.../auth/contacts.other.readonly</li> <li>.../auth/directory.readonly</li> <li>.../auth/profile.emails.read</li> </ul> </li> <li> <p>Add Test users as needed</p> </li> <li> <p>Go to the Credentials screen of the project and create a <code>OAuth Client ID</code> using the Create Credentials dropdown. Choose <code>Desktop App</code> as type</p> </li> <li> <p>The credentials you created will show you a <code>Client_ID</code> and <code>Client_Secret</code>. Copy those and paste them into their corresponding fields in the plugin settings</p> </li> </ul> <p>If you followed the instructions correctly, you should be done with the Google setup. The next time you add an account in the plugin settings screen, you will be asked to allow the Google app you just created to facilitate the query of your data.</p>"},{"location":"google-setup/#why-is-this-needed","title":"Why is this needed?","text":"<p>There are two components to using the Google API:</p> <ol> <li>API Client identification</li> <li>User authorization</li> </ol> <p>The second part is the OAuth2 flow you've likely seen in many applications.</p> <p></p> <p>The first part is what identifies the application facilitating the request, not the actual end user. Normally in web applications, the identification tokens for the application are in a backend and not visibile publically. Similarly, with desktop applications, the credentials might be included and obfuscated in the code such that they are not publically readable. In this case, the application is open source, and Google Terms for the API use do require that the credentials be treated as secret/private.</p> <p>If anyone knows of a way to include client credentials in an open source app in a compliant manner, please reach out! Otherwise, for now, the usage of the plugin will require users to do their own Google setup.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install-from-obsidian","title":"Install from Obsidian","text":"<p>The plugin is available here as a community plugin. For more info on how to enable and install community plugins, see this article on Obsidian Help</p>"},{"location":"install/#install-manually","title":"Install Manually","text":"<ul> <li>Download obsidian-google-lookup from the latest release</li> <li>Extract zip into your <code>.obsidian/plugins</code> folder</li> <li>Restart Obsidian</li> <li>Activate inside the obsidian settings page</li> </ul>"},{"location":"person/","title":"People Info","text":""},{"location":"person/#command-input","title":"Command Input","text":"<p>The input is a string search against Google Contacts. Anything that Google Contacts accepts as a query parameter will be supported. First/Last names, emails...etc</p> <p>When nothing has been input yet, the following criteria will be applied as default (in order):</p> <ul> <li>if some text is selected use that as a default query</li> <li>use the filename as a default query</li> </ul>"},{"location":"person/#moverename","title":"Move/Rename","text":"<p>If the option to move/rename the note is enabled (default is enabled), after the content from the person template is inserted:</p> <ul> <li>the note will be renamed according to the <code>filename format</code> option. the default here is <code>{{lastname}}, {{firstname}}</code>. Any field in the template fields listed below can be used</li> <li>the note will be moved to the directory specified in Settings. By default, this is blank which means the file would be renamed but will not be moved to any other directory</li> </ul> <p>If the first option below <code>Rename and move person file</code> is not enabled, the other two settings have no effect.</p> <p>When specifying your own filename format, make sure you pick something that continues to be unique across several contacts. i.e. picking <code>{{firstname}}</code> is valid, but obviously will not work out well if you have two contacts with the same first name.</p> <p>If you specify a directory to move the contact file to, make sure that directory exists!</p> <p></p>"},{"location":"person/#template","title":"Template","text":""},{"location":"person/#default-template","title":"Default Template","text":"<pre><code>---\naliases: [\"{{lastfirst}}\", \"{{firstlast}}\", \"{{firstname}}.{{lastname}}\", {{emails}}]\ncreated: [\"{{date}} {{time}}\"]\n---\n# {{firstname}} {{lastname}}\n#person #person/{{source}}\n\n{{org.title}} {{org.department}}\n\n----\n\n## Contact Info\n\nEmail: {{emails}}\nPhone: {{phones}}\n\n[open in Google Contacts]({{link}})\n\n{{primaryPhoto}}\n\n----\n\n## Log\n\n### [[{{date}}]] {{time}} - Created\n</code></pre> <p>The intention with this default template is to be used to create a new note rather than inserting into an existing one, although that can be customized by changing the template.</p>"},{"location":"person/#template-fields","title":"Template Fields","text":"<p>Fields are variables enclosed in <code>{{</code> <code>}}</code> and will be replaced when the content is generated.</p> Field Description firstName lastName middleName firstLast \"Firstname Lastname\" ex: <code>Stewie Griffin</code> lastFirst \"Lastname, First\" ex: <code>Griffin, Stewie</code> nicknames Nicknames, joined by <code>,</code> contactGroups contact groups from Google (ex: <code>myContacts</code>, <code>Starred</code>), joined by <code>,</code> emails Email(s), joined by <code>,</code> phones Phone number(s), joined by <code>,</code> addresses Address(es). The different fields in the address are joined by <code>,</code> and each address will be on a new line. birthdays birthday(s) stored for the contact in year-month-day format, joined by <code>,</code> org.title Title of contact in company directory (if applicable) org.department Person's department in company directory (if applicable) org.name Name of the organization/company (if applicable) type Passed along from Google API. Possible values here. Useful to differentiate a contact vs. someone obtained from company directory source will return the google account from where this event was fetched urls urls for that contact; includes things like homepage. will be returned as a comma separated string of <code>type: value</code>. For example, <code>homepage: https://www.obsidian.md</code> relations relations for the contact. will be returned as a comma separated string of <code>type: person</code>. For example, <code>spouse: Jack</code> clientData client key/value pairs. will be returned as a comma separated string of <code>key: value</code>. userData user defined key/value pairs. will be returned similar to <code>clientData</code> bio the contact's bio; in Google Contacts, that field is called <code>Notes</code> link will return the url, if available, to open the contact on Google Contacts photos profile photos for that contact. will be returned as a space separated markdown image links. For example, <code>![stewie photo](https://url.of.photo) ![stewie photo](https://url.of.another.photo)</code> primaryPhoto primary (based on Google sources) profile photo for that contact. will be returned as markdown image link. For example, <code>![stewie photo](https://url.of.photo)</code> json returns the entire contact object as JSON. this is useful when used with other templating plugins. see example below."},{"location":"person/#customizing-template","title":"Customizing Template","text":"<p>You can create your own template in a file, and include a link to that file in Settings for <code>Event Template</code>. For example, you can create a note in <code>_assets/templates/</code> called <code>t_event</code> and then provide the path <code>_assets/templates/t_event</code> in Settings</p>"},{"location":"person/#using-templater","title":"Using Templater","text":"<p>You can use the <code>json</code> field to get more flexibility with how the info is rendered in your template. This would typically be done with another templates plugin, such as Templater.</p> <pre><code>&lt;%*\n let json = {{json}}\n let firstName = json.firstName\n let emails = json.emails.join(\"\\n\")\n let relations = json.relations.map(({person, type}) =&gt; `${firstName} is a ${type || ''} relation to ${person}`).join(\"\\n\")\n -%&gt;\n\n my contact's first name is &lt;% firstName %&gt;\n emails:\n &lt;% emails %&gt;\n\n relations:\n &lt;% relations %&gt;\n\n date: &lt;% tp.file.creation_date(\"YYYY-MM-DD HH:mm:ss\") %&gt;\n\n&lt;% tp.file.cursor() %&gt;\n</code></pre> <p>The first line brings in the entire object into the <code>json</code> variable. From there, you can construct any template for each individual field. When the above Templater snippet is run, it would output something similar to this:</p> <pre><code> my contact's first name is Stewie\n emails:\n stewie.griffin@baby.example.com\n stewie@baby.genius.example.com\n\n relations:\n Stewie is a child relation to Lois\n Stewie is a brother relation to Brian\n\n date: 2022-10-26 14:57:22\n</code></pre>"}]}